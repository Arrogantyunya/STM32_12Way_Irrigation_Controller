<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [BootForSTM32F103RCT6\BootForSTM32F103RCT6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image BootForSTM32F103RCT6\BootForSTM32F103RCT6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed May 13 17:28:45 2020
<BR><P>
<H3>Maximum Stack Usage =       2264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BT_Receive_Protocol_Msg &rArr; BT_DataPack_Handler &rArr; BT_Copy_DataPack &rArr; BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[da]">LoRaUart_Baud_Config</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">LoRa_Parameter_Init</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">LoRa_Send_Data</a> from lora_timer.o(i.LoRa_Send_Data) referenced from main.o(i.main)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from lora_timer.o(i.TIM6_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from lora_timer.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[4b]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[4a]">fputc</a> from debug_uart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fe]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ff]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[100]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[101]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[102]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d7]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Load_APP
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[103]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
</UL>

<P><STRONG><a name="[71]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[107]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[108]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>AT24Cxx_ReadOneByte</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, at24c02.o(i.AT24Cxx_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_Read_SN_Code
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_Is_Saved_Check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Verify_LoRa_Addr_Flag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode_Flag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr_Flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Com_Mode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Addr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Clear_LoRa_Addr_Flag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_check_crc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
</UL>

<P><STRONG><a name="[5d]"></a>AT24Cxx_WriteOneByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at24c02.o(i.AT24Cxx_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode_Flag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr_Flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Clear_LoRa_Addr_Flag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
</UL>

<P><STRONG><a name="[5f]"></a>BT_APP_Check</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iap.o(i.BT_APP_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BT_APP_Check &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[62]"></a>BT_APP_Init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, boot_protocol.o(i.BT_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = BT_APP_Init &rArr; BT_Copy_DataPack &rArr; BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Stop_Interrupt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Jump_APP_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Check
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Copy_DataPack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Temp_S_Version
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_S_Version
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Temp_S_Version
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_SaveArea_DP_Size
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DP_Copy_Flag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Clear_DP_Copy_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>BT_CRC16_XMODEM</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, boot_crc16.o(i.BT_CRC16_XMODEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BT_CRC16_XMODEM
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Frame_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_Frame_Content
</UL>

<P><STRONG><a name="[66]"></a>BT_Clear_DP_Copy_Flag</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boot_mem.o(i.BT_Clear_DP_Copy_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BT_Clear_DP_Copy_Flag &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
</UL>

<P><STRONG><a name="[65]"></a>BT_Copy_DataPack</STRONG> (Thumb, 110 bytes, Stack size 2080 bytes, boot_protocol.o(i.BT_Copy_DataPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = BT_Copy_DataPack &rArr; BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Write_DP_To_Flash
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DP_From_Flash
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[70]"></a>BT_Cycle_Query_SW_Version</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, boot_protocol.o(i.BT_Cycle_Query_SW_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BT_Cycle_Query_SW_Version &rArr; BT_Send_Protocol_Msg &rArr; BT_Fill_Frame_Content &rArr; BT_Read_Temp_S_Version &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Query_Cycle_Value
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_GetDP_Cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>BT_DataPack_Handler</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, boot_protocol.o(i.BT_DataPack_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = BT_DataPack_Handler &rArr; BT_Copy_DataPack &rArr; BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Stop_Interrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Write_DP_To_Flash
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Jump_APP_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Check
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Start_Interrupt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Hex_To_Dec
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Copy_DataPack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Write_Flash_Addr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_S_Version
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_GetDP_Cycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_DataPack_Index
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Temp_S_Version
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_GetDP_Cycle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_CRC16_XMODEM
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[80]"></a>BT_Dec_To_Hex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, boot_protocol.o(i.BT_Dec_To_Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BT_Dec_To_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_Frame_Content
</UL>

<P><STRONG><a name="[7d]"></a>BT_Exception_trigger</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, boot_protocol.o(i.BT_Exception_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BT_Exception_trigger &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
</UL>

<P><STRONG><a name="[81]"></a>BT_Fill_ReservedByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.BT_Fill_ReservedByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BT_Fill_ReservedByte &rArr; app_mem_Read_SN_Code &rArr; app_mem_check_crc &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_Read_SN_Code
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_Is_Saved_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
</UL>

<P><STRONG><a name="[84]"></a>BT_Frame_Check</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, boot_protocol.o(i.BT_Frame_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BT_Frame_Check &rArr; BT_CRC16_XMODEM
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_CRC16_XMODEM
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[85]"></a>BT_Frame_Format_Check</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, boot_protocol.o(i.BT_Frame_Format_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BT_Frame_Format_Check &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[8f]"></a>BT_GetCRC8</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, boot_crc8.o(i.BT_GetCRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Write_Flash_Addr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Temp_S_Version
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_S_Version
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Query_Cycle_Value
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_GetDP_Cycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_DataPack_Index
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Write_Flash_Addr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Temp_S_Version
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_SaveArea_DP_Size
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_S_Version
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Query_Cycle_Value
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_GetDP_Cycle
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DataPack_Index
</UL>

<P><STRONG><a name="[87]"></a>BT_Get_Rcv_Reserved</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, boot_protocol.o(i.BT_Get_Rcv_Reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BT_Get_Rcv_Reserved &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[77]"></a>BT_Hex_To_Dec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, boot_protocol.o(i.BT_Hex_To_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT_Hex_To_Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[6a]"></a>BT_Jump_APP_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iap.o(i.BT_Jump_APP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT_Jump_APP_Handler &rArr; IAP_Load_APP
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Load_APP
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[6c]"></a>BT_MEM_Read_Bytes</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_mem.o(i.BT_MEM_Read_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Write_Flash_Addr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Temp_S_Version
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_S_Version
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Query_Cycle_Value
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_GetDP_Cycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_DataPack_Index
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Write_Flash_Addr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Temp_S_Version
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_SaveArea_DP_Size
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_S_Version
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Query_Cycle_Value
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_GetDP_Cycle
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DataPack_Index
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DP_Copy_Flag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Clear_DP_Copy_Flag
</UL>

<P><STRONG><a name="[6d]"></a>BT_MEM_Write_Bytes</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_mem.o(i.BT_MEM_Write_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Write_Flash_Addr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Temp_S_Version
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_S_Version
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Query_Cycle_Value
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_GetDP_Cycle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_DataPack_Index
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Clear_DP_Copy_Flag
</UL>

<P><STRONG><a name="[8b]"></a>BT_Mount_Dev_And_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, boot_protocol.o(i.BT_Mount_Dev_And_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BT_Mount_Dev_And_Init &rArr; BT_Fill_ReservedByte &rArr; app_mem_Read_SN_Code &rArr; app_mem_check_crc &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_ReservedByte
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Exception_trigger
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Write_Flash_Addr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Query_Cycle_Value
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_GetDP_Cycle
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DataPack_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>BT_Read_DP_Copy_Flag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boot_mem.o(i.BT_Read_DP_Copy_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BT_Read_DP_Copy_Flag &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
</UL>

<P><STRONG><a name="[6e]"></a>BT_Read_DP_From_Flash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iap.o(i.BT_Read_DP_From_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BT_Read_DP_From_Flash &rArr; Read_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Copy_DataPack
</UL>

<P><STRONG><a name="[8d]"></a>BT_Read_DataPack_Index</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, boot_mem.o(i.BT_Read_DataPack_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BT_Read_DataPack_Index &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
</UL>

<P><STRONG><a name="[74]"></a>BT_Read_GetDP_Cycle</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, boot_mem.o(i.BT_Read_GetDP_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BT_Read_GetDP_Cycle &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[75]"></a>BT_Read_Query_Cycle_Value</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Read_Query_Cycle_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Read_Query_Cycle_Value &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_Frame_Content
</UL>

<P><STRONG><a name="[7f]"></a>BT_Read_S_Version</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Read_S_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Read_S_Version &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_Frame_Content
</UL>

<P><STRONG><a name="[64]"></a>BT_Read_SaveArea_DP_Size</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, boot_mem.o(i.BT_Read_SaveArea_DP_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BT_Read_SaveArea_DP_Size &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
</UL>

<P><STRONG><a name="[67]"></a>BT_Read_Temp_S_Version</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Read_Temp_S_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Read_Temp_S_Version &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_Frame_Content
</UL>

<P><STRONG><a name="[8c]"></a>BT_Read_Write_Flash_Addr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, boot_mem.o(i.BT_Read_Write_Flash_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BT_Read_Write_Flash_Addr &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
</UL>

<P><STRONG><a name="[90]"></a>BT_Receive_Protocol_Msg</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, boot_protocol.o(i.BT_Receive_Protocol_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = BT_Receive_Protocol_Msg &rArr; BT_DataPack_Handler &rArr; BT_Copy_DataPack &rArr; BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReservedByte_Check
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Timer_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Get_Rcv_Reserved
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Frame_Format_Check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Frame_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Query_Cycle_Value
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>BT_ReservedByte_Check</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, boot_protocol.o(i.BT_ReservedByte_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BT_ReservedByte_Check &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[7a]"></a>BT_Save_DataPack_Index</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Save_DataPack_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Save_DataPack_Index &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[78]"></a>BT_Save_GetDP_Cycle</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Save_GetDP_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Save_GetDP_Cycle &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[94]"></a>BT_Save_Query_Cycle_Value</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Save_Query_Cycle_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Save_Query_Cycle_Value &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[68]"></a>BT_Save_S_Version</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Save_S_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Save_S_Version &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[6b]"></a>BT_Save_Temp_S_Version</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, boot_mem.o(i.BT_Save_Temp_S_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BT_Save_Temp_S_Version &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
</UL>

<P><STRONG><a name="[7b]"></a>BT_Save_Write_Flash_Addr</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, boot_mem.o(i.BT_Save_Write_Flash_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BT_Save_Write_Flash_Addr &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Read_Bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[73]"></a>BT_Send_Protocol_Msg</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, boot_protocol.o(i.BT_Send_Protocol_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BT_Send_Protocol_Msg &rArr; BT_Fill_Frame_Content &rArr; BT_Read_Temp_S_Version &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_Frame_Content
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[7c]"></a>BT_Start_Interrupt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, boot_protocol.o(i.BT_Start_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BT_Start_Interrupt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[69]"></a>BT_Stop_Interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lora_timer.o(i.BT_Stop_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT_Stop_Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
</UL>

<P><STRONG><a name="[91]"></a>BT_Timer_Handler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, boot_protocol.o(i.BT_Timer_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BT_Timer_Handler &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[95]"></a>BT_Version_Handle</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, boot_protocol.o(i.BT_Version_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BT_Version_Handle &rArr; BT_Save_Temp_S_Version &rArr; BT_MEM_Write_Bytes &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Hex_To_Dec
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Write_Flash_Addr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_Temp_S_Version
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Save_DataPack_Index
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Temp_S_Version
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_S_Version
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
</UL>

<P><STRONG><a name="[6f]"></a>BT_Write_DP_To_Flash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iap.o(i.BT_Write_DP_To_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Copy_DataPack
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>Config_LoRa_Delay</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lora.o(i.Config_LoRa_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>Debug_Print_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, debug_uart.o(i.Debug_Print_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Debug_Print_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>Delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
</UL>

<P><STRONG><a name="[8a]"></a>EEPROM_WP_Dis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at24c02.o(i.EEPROM_WP_Dis))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode_Flag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr_Flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Clear_LoRa_Addr_Flag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_check_crc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
</UL>

<P><STRONG><a name="[89]"></a>EEPROM_WP_En</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at24c02.o(i.EEPROM_WP_En))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode_Flag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr_Flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Clear_LoRa_Addr_Flag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MEM_Write_Bytes
</UL>

<P><STRONG><a name="[9d]"></a>EEPROM_WP_Init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, at24c02.o(i.EEPROM_WP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EEPROM_WP_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>EP_Clear_LoRa_Addr_Flag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lora.o(i.EP_Clear_LoRa_Addr_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EP_Clear_LoRa_Addr_Flag &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
</UL>

<P><STRONG><a name="[9f]"></a>EP_Read_LoRa_Addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lora.o(i.EP_Read_LoRa_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EP_Read_LoRa_Addr &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_ID
</UL>

<P><STRONG><a name="[a1]"></a>EP_Read_LoRa_Com_Mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lora.o(i.EP_Read_LoRa_Com_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EP_Read_LoRa_Com_Mode &rArr; EP_Save_LoRa_Com_Mode &rArr; EP_Save_LoRa_Com_Mode_Flag &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
</UL>

<P><STRONG><a name="[a3]"></a>EP_Save_LoRa_Addr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lora.o(i.EP_Save_LoRa_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EP_Save_LoRa_Addr &rArr; EP_Save_LoRa_Addr_Flag &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr_Flag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Clear_LoRa_Addr_Flag
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_ID
</UL>

<P><STRONG><a name="[a4]"></a>EP_Save_LoRa_Addr_Flag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lora.o(i.EP_Save_LoRa_Addr_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EP_Save_LoRa_Addr_Flag &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
</UL>

<P><STRONG><a name="[a2]"></a>EP_Save_LoRa_Com_Mode</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lora.o(i.EP_Save_LoRa_Com_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EP_Save_LoRa_Com_Mode &rArr; EP_Save_LoRa_Com_Mode_Flag &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode_Flag
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Com_Mode
</UL>

<P><STRONG><a name="[a5]"></a>EP_Save_LoRa_Com_Mode_Flag</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lora.o(i.EP_Save_LoRa_Com_Mode_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EP_Save_LoRa_Com_Mode_Flag &rArr; AT24Cxx_WriteOneByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
</UL>

<P><STRONG><a name="[a6]"></a>EP_Verify_LoRa_Addr_Flag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lora.o(i.EP_Verify_LoRa_Addr_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EP_Verify_LoRa_Addr_Flag &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_ID
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[a0]"></a>GetCRC8</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crc8.o(i.GetCRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Com_Mode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_check_crc
</UL>

<P><STRONG><a name="[c8]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Query_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
</UL>

<P><STRONG><a name="[aa]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
</UL>

<P><STRONG><a name="[f8]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
</UL>

<P><STRONG><a name="[ad]"></a>HAL_FLASH_Program</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_NoCheck
</UL>

<P><STRONG><a name="[f6]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
</UL>

<P><STRONG><a name="[d9]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 256 bytes, Stack size 28 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaSerial_End
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GPIO_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Print_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_UART_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_Out
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_In
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[9c]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GPIO_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Shutdown
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Reset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_En
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[f2]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[af]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Stop_Interrupt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaSerial_End
</UL>

<P><STRONG><a name="[f0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Tim_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_UART_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Tim_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_UART_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Tim_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Tim_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Tim_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Stop_Interrupt
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lora_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Print_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_UART_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_UART_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[ce]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lora_timer.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Send_Data
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Query_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>I2C_Ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_Out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[d4]"></a>I2C_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>I2C_NAck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.I2C_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_NAck &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_Out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>

<P><STRONG><a name="[5a]"></a>I2C_Read_Byte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, i2c.o(i.I2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_In
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>

<P><STRONG><a name="[d5]"></a>I2C_SDA_In</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, i2c.o(i.I2C_SDA_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_SDA_In &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[d2]"></a>I2C_SDA_Out</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, i2c.o(i.I2C_SDA_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
</UL>

<P><STRONG><a name="[58]"></a>I2C_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c.o(i.I2C_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_Send_Byte &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_Out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>

<P><STRONG><a name="[57]"></a>I2C_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Start &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_Out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>

<P><STRONG><a name="[5c]"></a>I2C_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_Out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>

<P><STRONG><a name="[59]"></a>I2C_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c.o(i.I2C_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_In
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>

<P><STRONG><a name="[88]"></a>IAP_Load_APP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iap.o(i.IAP_Load_APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_Load_APP
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Jump_APP_Handler
</UL>

<P><STRONG><a name="[d8]"></a>LoRaSerial_End</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lora.o(i.LoRaSerial_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoRaSerial_End &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Shutdown
</UL>

<P><STRONG><a name="[da]"></a>LoRaUart_Baud_Config</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, lora.o(i.LoRaUart_Baud_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_LoRa_Delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Restart
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
</UL>

<P><STRONG><a name="[dd]"></a>LoRa_AT</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lora.o(i.LoRa_AT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LoRa_AT &rArr; LoRa_AT_Config_Cmd &rArr; LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Query_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_ID
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Param_Check
</UL>

<P><STRONG><a name="[e1]"></a>LoRa_AT_Config_Cmd</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, lora.o(i.LoRa_AT_Config_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LoRa_AT_Config_Cmd &rArr; LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Check_OK_Msg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Check_Err_Msg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
</UL>

<P><STRONG><a name="[e0]"></a>LoRa_AT_Query_Cmd</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lora.o(i.LoRa_AT_Query_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LoRa_AT_Query_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parse_Command
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Check_Err_Msg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
</UL>

<P><STRONG><a name="[e8]"></a>LoRa_Baud_Change_Cmd</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lora.o(i.LoRa_Baud_Change_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
</UL>

<P><STRONG><a name="[e3]"></a>LoRa_Check_Err_Msg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lora.o(i.LoRa_Check_Err_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRa_Check_Err_Msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Query_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
</UL>

<P><STRONG><a name="[e4]"></a>LoRa_Check_OK_Msg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lora.o(i.LoRa_Check_OK_Msg))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
</UL>

<P><STRONG><a name="[e6]"></a>LoRa_GPIO_Config</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lora.o(i.LoRa_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LoRa_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Restart
</UL>

<P><STRONG><a name="[ec]"></a>LoRa_Get_CSQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lora.o(i.LoRa_Get_CSQ))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parse_Command
</UL>

<P><STRONG><a name="[df]"></a>LoRa_Mode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lora.o(i.LoRa_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LoRa_Mode &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Restart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
</UL>

<P><STRONG><a name="[e7]"></a>LoRa_Param_Check</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, lora.o(i.LoRa_Param_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRa_Param_Check &rArr; LoRa_AT &rArr; LoRa_AT_Config_Cmd &rArr; LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
</UL>

<P><STRONG><a name="[de]"></a>LoRa_Parameter_Init</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, lora.o(i.LoRa_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LoRa_Parameter_Init &rArr; Rewrite_ID &rArr; LoRa_AT &rArr; LoRa_AT_Config_Cmd &rArr; LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_ID
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Shutdown
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Restart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Param_Check
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Baud_Change_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Com_Mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_LoRa_Delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>LoRa_Parse_Command</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lora.o(i.LoRa_Parse_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRa_Parse_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Get_CSQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Query_Cmd
</UL>

<P><STRONG><a name="[ed]"></a>LoRa_Reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lora.o(i.LoRa_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRa_Reset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Restart
</UL>

<P><STRONG><a name="[ea]"></a>LoRa_Restart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora.o(i.LoRa_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRa_Restart &rArr; LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GPIO_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
</UL>

<P><STRONG><a name="[4c]"></a>LoRa_Send_Data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lora_timer.o(i.LoRa_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoRa_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[eb]"></a>LoRa_Shutdown</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora.o(i.LoRa_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LoRa_Shutdown &rArr; LoRaSerial_End &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaSerial_End
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
</UL>

<P><STRONG><a name="[ee]"></a>LoRa_Tim_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lora_timer.o(i.LoRa_Tim_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LoRa_Tim_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>LoRa_UART_Init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lora.o(i.LoRa_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoRa_UART_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>Read_Flash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, prh_flash.o(i.Read_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_DP_From_Flash
</UL>

<P><STRONG><a name="[e9]"></a>Rewrite_ID</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lora.o(i.Rewrite_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Rewrite_ID &rArr; LoRa_AT &rArr; LoRa_AT_Config_Cmd &rArr; LoRaUart_Baud_Config &rArr;  LoRa_Parameter_Init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Verify_LoRa_Addr_Flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Addr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>SystemClock_Config</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora_timer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora_timer.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Write_Flash_Buffer</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, prh_flash.o(i.Write_Flash_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Write_DP_To_Flash
</UL>

<P><STRONG><a name="[f7]"></a>Write_Flash_NoCheck</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, prh_flash.o(i.Write_Flash_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
</UL>

<P><STRONG><a name="[f9]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[109]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[61]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Send_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rewrite_ID
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Param_Check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Check_Err_Msg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Query_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT_Config_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_AT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Com_Mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Save_LoRa_Addr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Read_LoRa_Addr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Start_Interrupt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReservedByte_Check
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Exception_trigger
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Timer_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Get_Rcv_Reserved
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Frame_Format_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Copy_DataPack
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[fb]"></a>__0sprintf$5</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10a]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[60]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash_Buffer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Start_Interrupt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReservedByte_Check
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Exception_trigger
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Version_Handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Timer_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Get_Rcv_Reserved
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Frame_Format_Check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataPack_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Copy_DataPack
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[82]"></a>app_mem_Is_Saved_Check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_mem.o(i.app_mem_Is_Saved_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_mem_Is_Saved_Check &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_ReservedByte
</UL>

<P><STRONG><a name="[83]"></a>app_mem_Read_SN_Code</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_mem.o(i.app_mem_Read_SN_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = app_mem_Read_SN_Code &rArr; app_mem_check_crc &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_check_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Fill_ReservedByte
</UL>

<P><STRONG><a name="[fc]"></a>app_mem_check_crc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_mem.o(i.app_mem_check_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_mem_check_crc &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC8
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Dis
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadOneByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_Read_SN_Code
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, debug_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[93]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Param_Check
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_check_crc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = main &rArr; BT_Receive_Protocol_Msg &rArr; BT_DataPack_Handler &rArr; BT_Copy_DataPack &rArr; BT_Write_DP_To_Flash &rArr; Write_Flash_Buffer &rArr; Write_Flash_NoCheck &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Tim_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Parameter_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_GPIO_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaUart_Baud_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WP_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Print_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Receive_Protocol_Msg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Mount_Dev_And_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Cycle_Query_SW_Version
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_APP_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[86]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Param_Check
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mem_check_crc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Get_Rcv_Reserved
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Frame_Format_Check
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ae]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[a9]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[49]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[c7]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ca]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[7e]"></a>BT_Fill_Frame_Content</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, boot_protocol.o(i.BT_Fill_Frame_Content))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BT_Fill_Frame_Content &rArr; BT_Read_Temp_S_Version &rArr; BT_MEM_Read_Bytes &rArr; AT24Cxx_ReadOneByte &rArr; I2C_Read_Byte &rArr; I2C_Ack &rArr; I2C_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Dec_To_Hex
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Temp_S_Version
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_S_Version
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Read_Query_Cycle_Value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_CRC16_XMODEM
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Send_Protocol_Msg
</UL>

<P><STRONG><a name="[fa]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
